# -*- coding: utf-8 -*-
"""spam message classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3RAQoUO_kAYss0VzVE8CgryGxhHThpJ
"""

import pandas as pd
import numpy as np

data= pd.read_csv('/content/drive/MyDrive/Data Science /Data Science notebooks/SMSSpamCollection',sep='\t',header=None,names=['Label','SMS'])
data.head()

data.shape

data.Label.value_counts(normalize=True)

data['SMS']

data['Label']= data['Label'].map({'ham':0,'spam':1})

data['Label']

data.head()

import re
def cleaned(doc):
  doc = doc = re.sub(r'[^a-zA-Z\s]', '', doc, re.I|re.A)
  return doc

data['SMS']= data['SMS'].apply(cleaned)

x = data['SMS']
y = data['Label']

y

x.head()

#splitting the data set into train test split

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=1)

x_train.shape,x_test.shape,y_train.shape

x_train[4060]

#cleaning the dataset and converting into tf-idf format

from sklearn.feature_extraction.text import TfidfVectorizer

tf= TfidfVectorizer(lowercase=True,ngram_range=(1,2),
                    stop_words = 'english',max_df = 0.5,min_df =2,use_idf =True)

tf_matrix_train = tf.fit_transform(x_train)
tf_matrix_train = tf_matrix_train.toarray()

vocab = tf.get_feature_names()
vocab[1:10]

tf_matrix_train

tf_matrix_test = tf.transform(x_test)

#import the model

from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()

#training
nb.fit(tf_matrix_train,y_train)
#prediction
pred = nb.predict(tf_matrix_test)

pred

# confusion matrics

from sklearn.metrics import confusion_matrix,accuracy_score

confusion_matrix(y_test,pred)

import pickle
#saving my model to pickle file
pickle.dump(nb,open('model','wb'))

x_test[(pred==0) & (y_test==1)]

data = 'Moby Pub QuizWin a  High Street prize if u know who the new Duchess of Cornwall will be Txt her first name to unsub STOP   SP'
data = [data]

data

vec = tf.transform(data)
vec

nb.predict(vec)

model = pickle.load(open('model_pkl','rb'))

model.predict(vec)

